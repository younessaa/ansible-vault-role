- name: Remove vault files dir
  shell: rm -rf {{ files_dir  }}

- name: Create vault files dir
  file:
    path: "{{ files_dir }}"
    state: directory

- name: Upload vault project files
  synchronize:
    src: "{{ item }}"
    dest: "{{ files_dir }}"
  with_items:
    - "{{ role_path }}/files/"




- name: "Get image name of container : vault"
  docker_container_info:
    name: "vault"
  register: result

- name: Stop Vault Docker container
  community.docker.docker_compose:
    project_src: "{{ files_dir }}/"
    build: no
    state: absent
    remove_volumes: true
  when: result.exists




- name: Run Vault Docker container
  community.docker.docker_compose:
    project_src: "{{ files_dir }}/"
    build: no
    state: present
    
- name: Pause for 15 seconds waiting for vault container to be UP
  ansible.builtin.pause:
    seconds: 15
    
- name: Initialize Vault
  hashivault_init:
    secret_shares: 5
    secret_threshold: 3
    url: "{{ vault_addr }}"
    ca_cert: "{{ files_dir }}/vault.crt"
  register: vault_init
  
- name: Create vault dir
  shell: mkdir -p ~/vault/

- name: Save unseal keys to file
  copy:
    content: "{{ item }}"
    dest: "~/vault/unseal_key_{{ index }}"
  loop: "{{ vault_init.keys_base64 }}"
  loop_control:
    index_var: index 

- name: Save root token to file
  copy:
    content: "{{ vault_init.root_token }}"
    dest: "~/vault/root_token"

- name: Unseal Vault 1/3 --> 2/3 --> 3/3
  hashivault_unseal:
    keys: "{{ vault_init.keys_base64[index] }}"
    url: "{{ vault_addr }}"
    ca_cert: "{{ files_dir }}/vault.crt"
  loop: "{{ vault_init.keys_base64 }}"
  loop_control:
    index_var: index







- name: Creating Vault ansible policy
  hashivault_policy:
    name: myapprole-policy
    url: "{{ vault_addr }}"
    token: "{{ vault_init.root_token }}"
    rules_file: "{{ files_dir }}/ansible-policy.hcl"
    ca_cert: "{{ files_dir }}/vault.crt"

- name: Creating Vault application policy
  hashivault_policy:
    name: application-policy
    url: "{{ vault_addr }}"
    token: "{{ vault_init.root_token }}"
    rules_file: "{{ files_dir }}/application-policy.hcl"
    ca_cert: "{{ files_dir }}/vault.crt"
    
- name: Login to vault
  shell: docker exec vault vault login --tls-skip-verify "{{ vault_init.root_token }}"
  
- name: Enable approle
  shell: docker exec vault vault auth enable --tls-skip-verify approle

- name: Enable secret engine in path secret
  shell: docker exec vault vault secrets enable --tls-skip-verify -version=2 -path=secret kv

- name: Creating Vault Approle for Ansible
  hashivault_approle_role:
    name: ansible
    url: "{{ vault_addr }}"
    token: "{{ vault_init.root_token }}"
    ca_cert: "{{ files_dir }}/vault.crt"
    token_policies:
      - myapprole-policy

- name: Retrieve an approle role ID from Vault
  community.hashi_vault.vault_read:
    path: auth/approle/role/ansible/role-id
    url: "{{ vault_addr }}"
    token: "{{ vault_init.root_token }}"
    ca_cert: "{{ files_dir }}/vault.crt"
  register: approle_id
  
- name: Generate a secret-id for the given approle
  community.hashi_vault.vault_write:
    path: auth/approle/role/ansible/secret-id
    url: "{{ vault_addr }}"
    token: "{{ vault_init.root_token }}"
    ca_cert: "{{ files_dir }}/vault.crt"
  register: secret_id
  
- name: Save approle_id to file
  copy:
    content: "{{ approle_id.data.data.role_id }}"
    dest: "~/vault/approle_id.txt"
    
- name: Save secret_id to file
  copy:
    content: "{{ secret_id.data.data.secret_id }}"
    dest: "~/vault/secret_id.txt"

- name: Creating Vault Approle for Applications
  hashivault_approle_role:
    name: ApplicationRole
    url: "{{ vault_addr }}"
    token: "{{ vault_init.root_token }}"
    ca_cert: "{{ files_dir }}/vault.crt"
    token_policies:
      - application-policy

- name: Retrieve role ID of ApplicationRole
  community.hashi_vault.vault_read:
    path: auth/approle/role/ApplicationRole/role-id
    url: "{{ vault_addr }}"
    token: "{{ vault_init.root_token }}"
    ca_cert: "{{ files_dir }}/vault.crt"
  register: app_approle_id
  
- name: Generate a secret-id for the given approle
  community.hashi_vault.vault_write:
    path: auth/approle/role/ApplicationRole/secret-id
    url: "{{ vault_addr }}"
    token: "{{ vault_init.root_token }}"
    ca_cert: "{{ files_dir }}/vault.crt"
  register: app_secret_id
  
- name: Save app_approle_id to file
  copy:
    content: "{{ approle_id.data.data.role_id }}"
    dest: "~/vault/app_approle_id.txt"
    
- name: Save app_secret_id to file
  copy:
    content: "{{ secret_id.data.data.secret_id }}"
    dest: "~/vault/app_secret_id.txt"
      


      
 
